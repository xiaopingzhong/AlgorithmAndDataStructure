#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""
************************************************
@Time    : 2019-08-23 23:43
@Author  : zxp
@Project : AlgorithmAndDataStructure
@File    : 10_super方法优点解释.py
@Description: ==================================
    
@license: (C) Copyright 2013-2019.    
************************************************
"""

# super方法优点: https://www.cnblogs.com/zhuifeng-mayi/p/9221562.html
# 减少修改面积,公共父类仅被执行一次
# 这样做有一些缺点，比如说如果修改了父类名称，那么在子类中会涉及多处修改，另外，Python是允许多继承的语言
# 在super机制里可以保证公共父类仅被执行一次，至于执行的顺序，是按照MRO（Method Resolution Order）：方法解析顺序 进行的

# *********+++++++++++*********========*********+++++++++++*********========
# 经典的菱形继承案例，BC 继承 A，然后 D 继承 BC，创造一个 D 的对象。
#      ---> B ---
# A --|          |--> D
#      ---> C ---
# 使用 super() 可以很好地避免构造函数被调用两次,BC只生成一次
# *********+++++++++++*********========*********+++++++++++*********========








class FooParent:
    def bar(self, message):
        print(message)

class FooChild(FooParent):
    def bar(self,message):
        # *********+++++++++++*********========*********+++++++++++*********========
        #   # 这样做有一些缺点，比如说如果修改了父类名称，那么在子类中会涉及多处修改，另外，Python是允许多继承的语言
        # *********+++++++++++*********========*********+++++++++++*********========
        # FooParent出现的地方很多的话,则当父类进行修改,修改面积大面积增加
        FooParent.bar(self,message)



# *********+++++++++++*********========*********+++++++++++*********========
#   >>> FooChild().bar("Hello, Python.")  
# Hello, Python.
# *********+++++++++++*********========*********+++++++++++*********========

class FooParent:
    def bar(self, message):
        print(message)

class FooChild(FooParent):
    def bar(self, message):
        # *********+++++++++++*********========*********+++++++++++*********========
        # 在super机制里可以保证公共父类仅被执行一次，至于执行的顺序，是按照MRO（Method Resolution Order）：方法解析顺序 进行的
        # *********+++++++++++*********========*********+++++++++++*********========
        print(super(FooChild,self).bar(message))

# *********+++++++++++*********========*********+++++++++++*********========
#   >> > FooChild().bar("Hello, Python.")
# Hello, Python
# *********+++++++++++*********========*********+++++++++++*********========
